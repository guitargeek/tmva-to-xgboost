diff '--color=auto' -ruN gbrforest/include/GBRForest.h gbr/include/GBRForest.h
--- gbrforest/include/GBRForest.h	2021-06-22 21:37:16.073842090 +0200
+++ gbr/include/GBRForest.h	2021-06-22 21:38:21.823840903 +0200
@@ -15,8 +15,7 @@
 //  Josh Bendavid - MIT                                                 //
 //////////////////////////////////////////////////////////////////////////
 
-#include "CondFormats/Serialization/interface/Serializable.h"
-#include "CondFormats/GBRForest/interface/GBRTree.h"
+#include "GBRTree.h"
 
 #include <cmath>
 #include <vector>
@@ -41,7 +40,6 @@
   double fInitialResponse = 0.0;
   std::vector<GBRTree> fTrees;
 
-  COND_SERIALIZABLE;
 };
 
 //_______________________________________________________________________
diff '--color=auto' -ruN gbrforest/include/GBRForestTools.h gbr/include/GBRForestTools.h
--- gbrforest/include/GBRForestTools.h	2021-06-22 21:37:16.073842090 +0200
+++ gbr/include/GBRForestTools.h	2021-06-22 21:41:35.027170733 +0200
@@ -10,18 +10,15 @@
 // Author: Jonas Rembser
 //--------------------------------------------------------------------------------------------------
 
-#include "CondFormats/GBRForest/interface/GBRForest.h"
-#include "FWCore/ParameterSet/interface/FileInPath.h"
+#include "GBRForest.h"
 
 #include <memory>
+#include <string>
 
 // Create a GBRForest from an XML weight file
 std::unique_ptr<const GBRForest> createGBRForest(const std::string &weightsFile);
-std::unique_ptr<const GBRForest> createGBRForest(const edm::FileInPath &weightsFile);
 
 // Overloaded versions which are taking string vectors by reference to strore the variable names in
 std::unique_ptr<const GBRForest> createGBRForest(const std::string &weightsFile, std::vector<std::string> &varNames);
-std::unique_ptr<const GBRForest> createGBRForest(const edm::FileInPath &weightsFile,
-                                                 std::vector<std::string> &varNames);
 
 #endif
diff '--color=auto' -ruN gbrforest/include/GBRTree.h gbr/include/GBRTree.h
--- gbrforest/include/GBRTree.h	2021-06-22 21:37:16.073842090 +0200
+++ gbr/include/GBRTree.h	2021-06-22 21:39:01.127173524 +0200
@@ -22,8 +22,6 @@
 // indicate further intermediate nodes, whereas negative indices indicate
 // terminal nodes, which are stored simply as a vector of regression responses
 
-#include "CondFormats/Serialization/interface/Serializable.h"
-
 #include <vector>
 
 class GBRTree {
@@ -55,7 +53,6 @@
   std::vector<int> fRightIndices;
   std::vector<float> fResponses;
 
-  COND_SERIALIZABLE;
 };
 
 //_______________________________________________________________________
diff '--color=auto' -ruN gbrforest/include/TMVAZipReader.h gbr/include/TMVAZipReader.h
--- gbrforest/include/TMVAZipReader.h	2021-06-22 21:37:16.073842090 +0200
+++ gbr/include/TMVAZipReader.h	2021-06-22 21:39:17.457173225 +0200
@@ -23,8 +23,6 @@
 #ifndef CommonTools_MVAUtils_TMVAZipReader_h
 #define CommonTools_MVAUtils_TMVAZipReader_h
 
-#include "TMVA/IMethod.h"
-#include "TMVA/Reader.h"
 #include <string>
 
 namespace reco::details {
@@ -32,11 +30,6 @@
   bool hasEnding(std::string const& fullString, std::string const& ending);
   char* readGzipFile(const std::string& weightFile);
 
-  TMVA::IMethod* loadTMVAWeights(TMVA::Reader* reader,
-                                 const std::string& method,
-                                 const std::string& weightFile,
-                                 bool verbose = false);
-
 }  // namespace reco::details
 
 #endif
diff '--color=auto' -ruN gbrforest/src/GBRForestTools.cc gbr/src/GBRForestTools.cc
--- gbrforest/src/GBRForestTools.cc	2021-06-22 21:37:10.867175519 +0200
+++ gbr/src/GBRForestTools.cc	2021-06-22 21:44:19.520501114 +0200
@@ -1,9 +1,5 @@
-#include "CommonTools/MVAUtils/interface/GBRForestTools.h"
-#include "CommonTools/MVAUtils/interface/TMVAZipReader.h"
-#include "FWCore/ParameterSet/interface/FileInPath.h"
-#include "FWCore/Utilities/interface/Exception.h"
-
-#include "TFile.h"
+#include "GBRForestTools.h"
+#include "TMVAZipReader.h"
 
 #include <cstdio>
 #include <cstdlib>
@@ -11,6 +7,8 @@
 #include <cmath>
 #include <tinyxml2.h>
 #include <filesystem>
+#include <map>
+#include <stdexcept>
 
 namespace {
 
@@ -120,15 +118,6 @@
   }
 
   std::unique_ptr<GBRForest> init(const std::string& weightsFileFullPath, std::vector<std::string>& varNames) {
-    //
-    // Load weights file, for ROOT file
-    //
-    if (reco::details::hasEnding(weightsFileFullPath, ".root")) {
-      TFile gbrForestFile(weightsFileFullPath.c_str());
-      std::unique_ptr<GBRForest> up(gbrForestFile.Get<GBRForest>("gbrForest"));
-      gbrForestFile.Close("nodelete");
-      return up;
-    }
 
     //
     // Load weights file, for gzipped or raw xml file
@@ -152,7 +141,7 @@
     std::map<std::string, std::string> info;
     tinyxml2::XMLElement* infoElem = xmlDoc.FirstChildElement("MethodSetup")->FirstChildElement("GeneralInfo");
     if (infoElem == nullptr) {
-      throw cms::Exception("XMLError") << "No GeneralInfo found in " << weightsFileFullPath << " !!\n";
+      throw std::runtime_error(std::string("XMLError") + "No GeneralInfo found in " + weightsFileFullPath + " !!\n");
     }
     for (tinyxml2::XMLElement* e = infoElem->FirstChildElement("Info"); e != nullptr;
          e = e->NextSiblingElement("Info")) {
@@ -167,7 +156,7 @@
     std::map<std::string, std::string> options;
     tinyxml2::XMLElement* optionsElem = xmlDoc.FirstChildElement("MethodSetup")->FirstChildElement("Options");
     if (optionsElem == nullptr) {
-      throw cms::Exception("XMLError") << "No Options found in " << weightsFileFullPath << " !!\n";
+      throw std::runtime_error(std::string("XMLError") + "No Options found in " + weightsFileFullPath + " !!\n");
     }
     for (tinyxml2::XMLElement* e = optionsElem->FirstChildElement("Option"); e != nullptr;
          e = e->NextSiblingElement("Option")) {
@@ -187,7 +176,7 @@
     std::vector<double> boostWeights;
     tinyxml2::XMLElement* weightsElem = xmlDoc.FirstChildElement("MethodSetup")->FirstChildElement("Weights");
     if (weightsElem == nullptr) {
-      throw cms::Exception("XMLError") << "No Weights found in " << weightsFileFullPath << " !!\n";
+      throw std::runtime_error(std::string("XMLError") + "No Weights found in " + weightsFileFullPath + " !!\n");
     }
     bool hasTrees = false;
     for (tinyxml2::XMLElement* e = weightsElem->FirstChildElement("BinaryTree"); e != nullptr;
@@ -198,7 +187,7 @@
       boostWeights.push_back(w);
     }
     if (!hasTrees) {
-      throw cms::Exception("XMLError") << "No BinaryTrees found in " << weightsFileFullPath << " !!\n";
+      throw std::runtime_error(std::string("XMLError") + "No BinaryTrees found in " + weightsFileFullPath + " !!\n");
     }
 
     bool isRegression = info["AnalysisType"] == "Regression";
@@ -259,25 +248,10 @@
   return createGBRForest(weightsFile, varNames);
 }
 
-std::unique_ptr<const GBRForest> createGBRForest(const edm::FileInPath& weightsFile) {
-  std::vector<std::string> varNames;
-  return createGBRForest(weightsFile.fullPath(), varNames);
-}
-
 // Overloaded versions which are taking string vectors by reference to store the variable names in
 std::unique_ptr<const GBRForest> createGBRForest(const std::string& weightsFile, std::vector<std::string>& varNames) {
   std::unique_ptr<GBRForest> gbrForest;
 
-  if (weightsFile[0] == '/') {
-    gbrForest = init(weightsFile, varNames);
-  } else {
-    edm::FileInPath weightsFileEdm(weightsFile);
-    gbrForest = init(weightsFileEdm.fullPath(), varNames);
-  }
+  gbrForest = init(weightsFile, varNames);
   return gbrForest;
 }
-
-std::unique_ptr<const GBRForest> createGBRForest(const edm::FileInPath& weightsFile,
-                                                 std::vector<std::string>& varNames) {
-  return createGBRForest(weightsFile.fullPath(), varNames);
-}
diff '--color=auto' -ruN gbrforest/src/GBRTree.cc gbr/src/GBRTree.cc
--- gbrforest/src/GBRTree.cc	2021-06-22 21:37:10.867175519 +0200
+++ gbr/src/GBRTree.cc	2021-06-22 21:37:54.913841388 +0200
@@ -1,4 +1,4 @@
-#include "CondFormats/GBRForest/interface/GBRTree.h"
+#include "GBRTree.h"
 
 //_______________________________________________________________________
 GBRTree::GBRTree(int nIntermediate, int nTerminal) {
diff '--color=auto' -ruN gbrforest/src/TMVAZipReader.cc gbr/src/TMVAZipReader.cc
--- gbrforest/src/TMVAZipReader.cc	2021-06-22 21:37:10.867175519 +0200
+++ gbr/src/TMVAZipReader.cc	2021-06-22 21:45:24.727166613 +0200
@@ -1,9 +1,9 @@
-#include "CommonTools/MVAUtils/interface/TMVAZipReader.h"
-#include "FWCore/Utilities/interface/Exception.h"
+#include "TMVAZipReader.h"
 
 #include <cstdio>
 #include <cstdlib>
 #include <zlib.h>
+#include <stdexcept>
 
 using namespace std;
 
@@ -19,7 +19,7 @@
 char* reco::details::readGzipFile(const std::string& weightFile) {
   FILE* f = fopen(weightFile.c_str(), "r");
   if (f == nullptr) {
-    throw cms::Exception("InvalidFileState") << "Failed to open MVA file = " << weightFile << " !!\n";
+    throw std::runtime_error(std::string("InvalidFileState") + "Failed to open MVA file = " + weightFile + " !!\n");
   }
   int magic;
   int size;
@@ -41,69 +41,10 @@
     error_string = gzerror(file, &err);
     if (err) {
       free(buffer);
-      throw cms::Exception("InvalidFileState") << "Error while reading gzipped file = " << weightFile << " !!\n"
-                                               << error_string;
+      throw std::runtime_error(std::string("InvalidFileState") + "Error while reading gzipped file = " + weightFile + " !!\n"
+                                               + error_string);
     }
   }
   gzclose(file);
   return buffer;
 }
-
-TMVA::IMethod* reco::details::loadTMVAWeights(TMVA::Reader* reader,
-                                              const std::string& method,
-                                              const std::string& weightFile,
-                                              bool verbose) {
-  TMVA::IMethod* ptr = nullptr;
-
-  verbose = false;
-  if (verbose)
-    std::cout << "Booking TMVA Reader with " << method << " and weight file: " << weightFile << std::endl;
-
-  if (reco::details::hasEnding(weightFile, ".xml")) {
-    if (verbose)
-      std::cout << "Weight file is pure xml." << std::endl;
-    // Let TMVA read the file
-    ptr = reader->BookMVA(method, weightFile);
-  } else if (reco::details::hasEnding(weightFile, ".gz") || reco::details::hasEnding(weightFile, ".gzip")) {
-    if (verbose)
-      std::cout << "Unzipping file." << std::endl;
-    char* c = readGzipFile(weightFile);
-
-    // We can't use tmpnam, gcc emits a warning about security.
-    // This is also technically insecure in the same way, since we append
-    // a suffix and then open another file.
-    char tmpFilename[] = "/tmp/tmva.XXXXXX";
-    int fdToUselessFile = mkstemp(tmpFilename);
-    std::string weight_file_name(tmpFilename);
-    weight_file_name += ".xml";
-    FILE* theActualFile = fopen(weight_file_name.c_str(), "w");
-    if (theActualFile != nullptr) {
-      // write xml
-      fputs(c, theActualFile);
-      fputs("\n", theActualFile);
-      fclose(theActualFile);
-      close(fdToUselessFile);
-    } else {
-      throw cms::Exception("CannotWriteFile") << "Error while writing file = " << weight_file_name << " !!\n";
-    }
-    if (verbose)
-      std::cout << "Booking MvA" << std::endl;
-    ptr = reader->BookMVA(method, weight_file_name);
-    if (verbose)
-      std::cout << "Cleaning up" << std::endl;
-    remove(weight_file_name.c_str());
-    remove(tmpFilename);
-
-    // Someday this will work.
-    // reader->BookMVA(TMVA::Types::Instance().GetMethodType(TString(method)), c);
-    if (verbose) {
-      std::cout << "Reader booked" << std::endl;
-    }
-    free(c);
-  } else {
-    throw cms::Exception("BadTMVAWeightFilename") << "I don't understand the extension on the filename: " << weightFile
-                                                  << ", it should be .xml, .gz, or .gzip" << std::endl;
-  }
-
-  return ptr;
-}
